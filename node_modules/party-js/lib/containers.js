"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.particleContainer = exports.debugContainer = exports.rootContainer = void 0;
var settings_1 = require("./settings");
var lazy_1 = require("./util/lazy");
/**
 * The prefix to apply to the containers.
 */
var elementPrefix = "party-js-";
/**
 * A utility method to partially update the style of the specified element.
 */
function partialUpdateStyle(element, style) {
    Object.assign(element.style, style);
}
/**
 * Checks if the specified container is 'active', meaning not undefined and attached to the DOM.
 */
function isContainerActive(container) {
    return container && container.isConnected;
}
/**
 * Returns the root container of the library. Creates it, if it doesn't exist yet.
 */
function createRootContainer() {
    var container = document.createElement("div");
    container.id = elementPrefix + "container";
    // Style the container to stretch across the full screen, without being interactable
    // by the user. Also apply the z-index from the global settings.
    partialUpdateStyle(container, {
        position: "absolute",
        left: "0",
        top: "0",
        pointerEvents: "none",
        userSelect: "none",
        zIndex: settings_1.settings.zIndex.toString(),
    });
    document.body.appendChild(container);
    // Ensure that the root container is always the same size as the entire DOM.
    function fitToWindow() {
        if (isContainerActive(container)) {
            container.style.height = document.body.offsetHeight + "px";
            container.style.width = document.body.offsetWidth + "px";
        }
        window.requestAnimationFrame(fitToWindow);
    }
    window.requestAnimationFrame(fitToWindow);
    return container;
}
/**
 * Returns the debugging container of the library. Creates it, if it doesn't exist yet.
 */
function createDebugContainer() {
    var container = document.createElement("div");
    container.id = elementPrefix + "debug";
    // Style the container in a non-prominent, simplistic, yet clean way, in the top-left corner.
    partialUpdateStyle(container, {
        position: "absolute",
        top: "0",
        left: "0",
        margin: "0.5em",
        padding: "0.5em 1em",
        border: "2px solid rgb(0, 0, 0, 0.2)",
        background: "rgb(0, 0, 0, 0.1)",
        color: "#555",
        fontFamily: "monospace",
    });
    exports.rootContainer.current.appendChild(container);
    return container;
}
/**
 * Returns the particles container of the library. Creates it, if it doesn't exist yet.
 */
function createParticleContainer() {
    var container = document.createElement("div");
    container.id = elementPrefix + "particles";
    // Style the container to stretch the full parent width, and apply a perspective distortion.
    partialUpdateStyle(container, {
        width: "100%",
        height: "100%",
        overflow: "hidden",
        perspective: "100vw",
    });
    exports.rootContainer.current.appendChild(container);
    return container;
}
exports.rootContainer = new lazy_1.Lazy(createRootContainer, isContainerActive);
exports.debugContainer = new lazy_1.Lazy(createDebugContainer, isContainerActive);
exports.particleContainer = new lazy_1.Lazy(createParticleContainer, isContainerActive);
//# sourceMappingURL=containers.js.map