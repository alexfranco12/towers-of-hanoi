import * as components from "./components";
import { Emitter } from "./particles/emitter";
import { Particle } from "./particles/particle";
import { Scene } from "./scene";
import * as math from "./systems/math";
import * as modules from "./systems/modules";
import * as random from "./systems/random";
import * as sources from "./systems/sources";
import * as variation from "./systems/variation";
import * as templates from "./templates";
import * as util from "./util";
declare const PartyGlobal: {
    scene: util.Lazy<Scene>;
    settings: import("./settings").Settings;
    Particle: typeof Particle;
    Emitter: typeof Emitter;
    variation: typeof variation;
    sources: typeof sources;
    random: typeof random;
    math: typeof math;
    util: typeof util;
    /**
     * Forces the initialization of the otherwise lazy scene.
     */
    forceInit(): void;
    ModuleBuilder: typeof modules.ModuleBuilder;
    resolveShapeFactory(factory: variation.Variation<string | HTMLElement>): HTMLElement;
    resolvableShapes: Record<string, string>;
    confetti(source: sources.DynamicSourceType, options?: Partial<templates.ConfettiConfiguration>): Emitter;
    sparkles(source: sources.DynamicSourceType, options?: Partial<templates.SparkleConfiguration>): Emitter;
    Circle: typeof components.Circle;
    Color: typeof components.Color;
    Gradient: typeof components.Gradient;
    NumericSpline: typeof components.NumericSpline;
    Rect: typeof components.Rect;
    Vector: typeof components.Vector;
};
export default PartyGlobal;
